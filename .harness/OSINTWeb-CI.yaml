pipeline:
  name: OSINT-Web-CI-Frontend
  identifier: OSINTWebCIFrontend
  projectIdentifier: DemoTx
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1702454216196
        repoName: osint-vm-clone
        build: <+input>
  stages:
    - stage:
        name: build-froentend-package
        identifier: buildfroentendpackage
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: build
                  identifier: build
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash
                      set -euo pipefail

                      # Input from pipeline
                      build_type="<+pipeline.stages.buildfroentendpackage.variables.build_type>"

                      cd frontend

                      if [[ "$build_type" == "dev" ]]; then
                        echo "Building frontend (dev)..."
                        npm ci
                        npm run build:dev

                      elif [[ "$build_type" == "prod" ]]; then
                        echo "Building frontend (prod)..."
                        npm ci --production
                        npm run build:prod

                      else
                        echo "❌ Invalid build_type: $build_type (expected 'dev' or 'prod')"
                        exit 1
                      fi

                      echo "Storing frontend build output in ./build-out..."
                      rm -rf build-out || true
                      mkdir -p build-out
                      cp -r dist/* build-out/

                      echo "✅ Frontend $build_type build complete."
                  description: building frontend
              - stepGroup:
                  name: zip and publish
                  identifier: zip_and_publish
                  steps:
                    - step:
                        type: Run
                        name: zip-art
                        identifier: zipart
                        spec:
                          shell: Sh
                          command: |-
                            artifact_name="onist_frontend_${build_type}_${build_number}.zip"

                            echo "Zipping build into $artifact_name..."
                            zip -r "../$artifact_name" build-out/

                            # Export variable for next step
                            echo "export ARTIFACT_NAME=$artifact_name" >> "$HOME/.bashrc"
                            echo "ARTIFACT_NAME=$artifact_name" >> "$HOME/variable.env"

                            echo "✅ Artifact created: $artifact_name"
        variables:
          - name: build_type
            type: String
            description: dev or prod build
            required: true
            value: <+input>.default(dev).allowedValues(dev,prod)
